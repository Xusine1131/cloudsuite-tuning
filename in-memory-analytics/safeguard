#!/bin/bash 

source user.cfg
source default.cfg

function docker_permission(){
    if [ "$(docker images 2>&1 | grep -q "permission denied")" ]; then 
        echo "unable to run docker without sudo" 
        exit
    else
        echo "passed docker's permission check"
    fi
}

function platform_check(){
    if [[ "$(grep amd64 default.cfg)" ]]; then 
        echo "x86_64 dependent settings used"
        if [[ "$(lscpu | grep x86)" ]]; then 
            echo "passed platform check"
        else
            echo "failed platform check"
            exit 
        fi 
    elif [[ "$(grep arm64 default.cfg)" ]]; then 
        echo "aarch64 dependent settings used"
        if [[ "$(lscpu | grep aarch64)" ]]; then
            echo "passed platform check"
        else
            echo "failed platform check"
            exit 
        fi  
    else
        echo "no platform dependent settings used"
    fi 
} 

function valid_core () {
    # pattern: On-line CPU(s) list:   0-23
    max_avail_cores=`lscpu | grep -oP "CPU\((s\)) list: \K.*" | tr "-" "\n" | sed -n 2p`
    max_req_core=`grep CPUS user.cfg | grep -Eo [0-9]+ | sort -rn | head -n 1`
    (($DEV)) && echo "Max requested core is $max_req_core"
    
    if [[ $max_req_cores -gt $max_avail_cores ]]; then
        echo "core $max_req_core exceeds max core count "
        exit 
    else 
        echo "passed core assignment check"
    fi
}

function log_folder () {
    if [[ ! -d $RESULTS ]]; then 
        # echo "create result folder $RESULTS"
        mkdir $RESULTS 
    fi 

    if [[ ! -d $OUT ]]; then 
        # echo "create log folder $OUT"
        mkdir $OUT
    else
        exp_cnt=`ls $RESULTS | grep -Eo [0-9]+ | sort -rn | head -n 1`
        (($DEV)) && echo "max exp count is $exp_cnt"
        ((!$DEV)) && mv $OUT $RESULTS/$((exp_cnt + 1)) 
    fi  
}

(($DEV)) && docker_permission
(($DEV)) && platform_check 
(($DEV)) && valid_core  
log_folder
