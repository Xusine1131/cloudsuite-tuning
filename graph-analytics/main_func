#!/bin/bash 

function start_master(){
    (($DEV)) && echo "start master"
    clean_containers $MASTER_CONTAINER
    docker run -dP --net ${NET} --hostname ${HOSTNAME} --name ${MASTER_CONTAINER} --cpuset-cpus=${MASTER_CPUS} ${SPARK} master
    MASTER_PID=$(docker inspect -f '{{.State.Pid}}' ${MASTER_CONTAINER})
}

function start_workers(){
    clean_containers $WORKER_CONTAINER
    CNT=0
    (($DEV)) && echo "Worker cnt is ${NUM_WORKERS}"
    while [[ ${CNT} -lt ${NUM_WORKERS} ]]; do 
        if mkdir ${LOCKDIR}; then
            # docker run -dP --net ${NET} --volumes-from ${DATASET_CONTAINER} --name ${WORKER_CONTAINER}-${CNT} --cpuset-cpus=${WORKER_CPUS[${CNT}]} ${SPARK} worker spark://${MASTER_CONTAINER}:7077
            docker run -dP --net ${NET} -v $DATASET_VOL:/data --name ${WORKER_CONTAINER}-${CNT} --cpuset-cpus=${WORKER_CPUS[${CNT}]} ${SPARK} worker spark://${MASTER_CONTAINER}:7077
            local worker_id=$(docker inspect -f '{{.State.Pid}}' ${WORKER_CONTAINER}-${CNT})    
            CNT=$((CNT + 1))
            if [ -z "$WORKER_PIDS" ]; then 
                WORKER_PIDS=$worker_id
            else
                WORKER_PIDS="$WORKER_PIDS,$worker_id"
            fi  
            rm -rf ${LOCKDIR}
        fi 
    done
}

function start_client(){
    (($DEV)) && echo "start client"
    clean_containers $CLIENT_CONTAINER
    # docker run -d --net ${NET} --name ${CLIENT_CONTAINER} --cpuset-cpus=${CLIENT_CPUS} --volumes-from ${DATASET_CONTAINER} ${CLIENT_IMAGE} --driver-memory ${DRIVER_MEM} --executor-memory ${EXECUTOR_MEM} --master spark://${MASTER_CONTAINER}:7077
    docker run -d --net ${NET} --name ${CLIENT_CONTAINER} --cpuset-cpus=${CLIENT_CPUS} -v $DATASET_VOL:/data ${CLIENT_IMAGE} --driver-memory ${DRIVER_MEM} --executor-memory ${EXECUTOR_MEM} --master spark://${MASTER_CONTAINER}:7077

}

function detect_stage () {
    case "$1" in
    master-ready)
        KEYWORDS="I have been elected leader"
        log_helper_stderr ${MASTER_CONTAINER} "${KEYWORDS}" 
        ;;
    workers-ready) 
        KEYWORDS="Successfully registered with master"
        READY=0
        CNT=0
        while [[ ${CNT} -lt ${NUM_WORKERS} ]]; do
            log_helper_stderr ${WORKER_CONTAINER}-${CNT} "${KEYWORDS}" 
            if mkdir $LOCKDIR; then 
                READY=$((READY+1))
                CNT=$((CNT + 1))
                if [[ ${READY} -eq ${NUM_WORKERS} ]]; then
                    rm -rf ${LOCKDIR} 
                    return
                fi
                rm -rf ${LOCKDIR}
            fi 
        done
        ;;
    executor-ready)
        KEYWORDS="ExecutorRunner: Launch command"
        READY=0
        CNT=0
        while [[ ${CNT} -lt ${NUM_WORKERS} ]]; do
            log_helper_stderr ${WORKER_CONTAINER}-${CNT} "${KEYWORDS}"
            if mkdir $LOCKDIR; then
                READY=$((READY+1))
                CNT=$((CNT + 1))
                if [[ ${READY} -eq ${NUM_WORKERS} ]]; then
                    rm -rf ${LOCKDIR}
                    return
                fi
                rm -rf ${LOCKDIR}
            fi
        done
        ;;
    warmup) 
        # Got 100004 ratings from 671 users on 9066 movies.
        KEYWORDS="Total input paths to process"
        log_helper_stderr ${CLIENT_CONTAINER} "${KEYWORDS}"
        ;;
    executor-killed)
        KEYWORDS="ExecutorRunner: Killing process"
        FINISHED=0
        CNT=0
        while [[ ${CNT} -lt ${NUM_WORKERS} ]]; do
            log_helper_stderr ${WORKER_CONTAINER}-${CNT} "${KEYWORDS}"
            if mkdir $LOCKDIR; then
                FINISHED=$((FINISHED+1))
                CNT=$((CNT + 1))
                if [[ ${FINISHED} -eq ${NUM_WORKERS} ]]; then
                    rm -rf ${LOCKDIR}
                    return
                fi
                rm -rf ${LOCKDIR}
            fi
        done
        ;;
  
    finished) 
        KEYWORDS="Running time ="
        log_helper_stdout ${CLIENT_CONTAINER} "${KEYWORDS}" 2 
        ;;
    *) 
        printf "Unrecognized option for stage $1:\n \
            master-ready, workers-ready, ramp-up, finished"
        exit 1 
    esac
}

function log_client(){
    docker logs $CLIENT_CONTAINER >> $CLIENT_LOG
}

function client_summary(){
    grep "Running time" $CLIENT_LOG >> $CLIENT_SUMMARY
    cat $PERF_LOG | awk '{printf "%15s\n",$1}' >> $CLIENT_SUMMARY
}
