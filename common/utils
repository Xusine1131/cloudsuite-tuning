#!/bin/bash 

function cvt_cpu() {
# convert an array of cpus (1,2 3) into a string 1,2,3
    local str_cpus=`echo $WORKER_CPUS`
    CNT=1
    TMP_LOCK=/tmp/cvt-cpu.lock 
    while [[ ${CNT} -lt ${NUM_WORKERS} ]]; do
	if mkdir $TMP_LOCK; then
	    str_cpus="$str_cpus,${WORKER_CPUS[${CNT}]}"
	    CNT=$((CNT + 1))
	    rm -rf $TMP_LOCK  
	fi 
    done
    echo $str_cpus
}

function create_dataset(){
    [ ! "$(docker ps -a | grep ${DATASET_CONTAINER})" ] && docker create --name ${DATASET_CONTAINER} ${DATASET_IMAGE} && echo "dataset $DATASET_CONTAINER created"
}

function create_network(){
    [ ! "$(docker network ls | grep ${NET})" ] && docker network create ${NET} && echo "network $NET created"
}

function clean_containers(){
    # remove all containers whose name contains the keyword 
    [ "$(docker ps -a | grep $1)" ] && echo "containers match $1 are found for removal" && docker ps --filter name="$1" -aq | xargs docker stop | xargs docker rm
}

function log_helper_stderr () {
    # Look for the key words in stderr (2) of docker logs output 
    # $1: container_name, $2: keyword, $3: delay (default=1)
    while true; do
        if docker logs "$1" 2>&1 | grep -q "$2"; then
            echo "$1 is ready"
            return  
        else
            echo "$1 is not ready"
            sleep ${3-1}
        fi
    done
}

function log_helper_stdout () {
    # Look for the key words in stdout (1) of docker logs output 
    # $1: container_name, $2: keyword, $3: delay (default=1)
    while true; do
        if docker logs "$1" 2>/dev/null | grep -q "$2"; then
            echo "$1 is ready"
            return  
        else
            echo "$1 is not ready"
            sleep ${3-1}
        fi
    done
}

function log_helper_extern (){
    # Look for the key words in external log file 
    # $1: external_log_name, $2: keyword, $3: delay (default=1)
    while true; do
        if grep -q "$2" "$1"; then
            echo "$2 is found"
            return
        else
            echo "$2 is not found"
            sleep ${3-1}
        fi
    done
}

function log_folder () {
    if [[ ! -d $RESULTS ]]; then
        (($DEV)) && echo "create experimental folder $RESULTS"
    mkdir $RESULTS
    fi

    if [[ ! -d $OUT ]]; then
        (($DEV)) && echo "create tmp folder $OUT"
        mkdir $OUT
    else
        exp_cnt=`ls $RESULTS | grep -Eo [0-9]+ | sort -rn | head -n 1`
        (($DEV)) && echo "max exp count is $exp_cnt"
        [ "$(ls -A $OUT)" ] && mv $OUT $RESULTS/$((exp_cnt + 1)) && mkdir $OUT
    fi
}

function rm_all_containers(){
    [ "$(docker ps -aq)" ] && docker stop $(docker ps -aq) | xargs docker rm
}

