#!/bin/bash 

source user.cfg
source default.cfg

rm -rf $LOCKDIR

function input_file_check(){
    # check if the required operation file presents
    if [ -f $INPUT_FILE ]; then 
	echo "Input file $INPUT_FILE found"
    else
	echo "WARNING,$INPUT_FILE not found!"
    fi 
}

function platform_check(){
    if [[ "$(grep amd64 default.cfg)" ]]; then 
        echo "x86_64 dependent settings used"
        if [[ $PLAT = "x86" ]]; then 
            echo "passed platform check"
        else
            echo "failed platform check"
            exit 
        fi 
    elif [[ "$(grep arm64 default.cfg)" ]]; then 
        echo "aarch64 dependent settings used"
        if [[ $PLAT = "aarch64" ]]; then
            echo "passed platform check"
        else
            echo "failed platform check"
            exit 
        fi  
    else
        echo "no platform dependent settings used"
    fi 
} 

function valid_core () {
    # pattern: On-line CPU(s) list:   0-23
    max_avail_core=`lscpu | grep -oP "CPU\((s\)) list: \K.*" | tr "-" "\n" | sed -n 2p`
    max_req_core=`grep CPUS user.cfg | grep -Eo [0-9]+ | sort -rn | head -n 1`
    (($DEV)) && echo "Max requested core is $max_req_core"
    (($DEV)) && echo "Max avail core is $max_avail_core"
    
    if [[ $max_req_core -gt $max_avail_core ]]; then
        echo "core $max_req_core exceeds max core count "
        exit 
    else 
        echo "passed core assignment check"
    fi
}

input_file_check
platform_check
docker_permission
valid_core  
log_folder
